-.常用命令
1.通用命令
	/keywords	从上到下搜索某个关键字
	？keywords	从下到上搜索某个关键字
	n			定位到下一个搜索到的关键字
	N			定位到上一个搜索到的关键字
2.echo
	echo string   //控制台打印字符串
	echo $var	  //控制台打印字变量
3.date
	date		 显示系统当前时间
	date "+%Y-%m-%d %H:%M:%S"	按照特定格式显示当前时间
	date -s 	 设置当前时间
	date "+%j"	 显示当前时间在一年中的天数
4.reboot
	reboot		重启
5.poweroff
	poweroff	关机
6.wget
	wget link	下载命令
		-r		递归下载
		-p		下载所有资源
7.ps
	ps 			显示当前进程
		-a		显示所有进程
		-u		用户以及其他详细信息
		-x		显示没有控制终端的进程
		---------进程状态----------------
		R（运行）：进程正在运行或在运行队列中等待。
		S（中断）：进程处于休眠中，当某个条件形成后或者接收到信号时，则脱离该   状态。
		D（不可中断）：进程不响应系统异步信号，即便用kill命令也不能将其中断。
		Z（僵死）：进程已经终止，但进程描述符依然存在, 直到父进程调用wait4()系统函数后将进程释放。
		T（停止）：进程收到停止信号后停止运行。
8.top
	top			查看进程转态和资源利用情况
9.pidof
	pidof service	查看对应服务的pid
10.kill
	kill [参数] pid		杀死对应的进程
	killall	servicename	杀死和服务相关的所有进程
	
-------------------
二.运维相关命令
11.ifconfig
	ifconfig 	获取网卡相关信息
12.uname
	uname -a	查看内核信息
13.uptime
	uptime		负载情况
14.free
	free -h		查看内存使用情况
15.who
	who 查看连入用户及终端情况
16.last
	last 查看系统登录记录
17.history
	history 查看执行过的命令记录
------------------------------
三.日常命令
18.pwd
	pwd 	查看当前所在目录
19.cat
	cat -n filename	 带行号显示文本内容，用户显示小文本
20.more
	more filename	 显示文本内容，通常用于查看较大文本
21.head
	head -n 50 filename 显示文本前50行
22.tail
	tail -n 50 filename 显示文本后50行
	tail -f filename 	实时刷新显示文本末尾情况，用来查看日志很方便
23.tr
	tr 	批量替换文本
	cat anaconda-ks.cfg | tr [a-z] [A-Z]   小写全部换成大写
24.cut
	cut [选项] filename	按列提取文本
25.dd
	dd	按照大小和要求复制数据块
		if 输入文件名
		of	输出文件名
		bs	设置每个块大小
		count	设置要复制块数
	dd if=/dev/zero of=560_file count=1 bs=560M
26.tar
	tar
		-c 压缩
		-x 解压
		-t 查看有哪些文件
		
	tar -czvf 压缩命令
	tar -czvf 解压命令
27.grep
	grep -n 带行号的查找
	grep -v 反选
28.find
	-name 按名称匹配
	-user 按用户匹配
	-group 按用户组匹配
	-size 按大小匹配
	-exec {}   \ 搜索结果执行
	find / -user root -exec cp -a {} /root/findresults/ \
	
----------------------------------part2输入输出重定向---------------------------------

标准输入重定向（STDIN，文件描述符为0）：默认从键盘输入，也可从其他文件或命令中输入。
标准输出重定向（STDOUT，文件描述符为1）：默认输出到屏幕。
错误输出重定向（STDERR，文件描述符为2）：默认输出到屏幕。
1.输入重定向
	命令 	<  文件    		从文件读取命令
	命令	<< 分界符		从标准输入中读入，直到遇见分界符才停止
	命令 < 文件1 > 文件2	将文件1作为命令的标准输入并将标准输出到文件2
	
2.输出重定向
	命令 > 文件				将标准输出重定向到一个文件中（清空原有文件的数据）
	命令 2> 文件			将错误输出重定向到一个文件中（清空原有文件的数据）
	命令 >> 文件			将标准输出重定向到一个文件中（不清空原有文件的数据，追加到末尾）
	命令 2>> 文件			将错误输出重定向到一个文件中（不清空原有文件的数据，追加到末尾）
	
	命令 >> 文件 2>&1		将标准输出与错误输出共同写入到文件中（追加到原有内容的后面）
	
3.管道命令符
	|  连接多个命令的强大工具
	
--------------------------------part3文本编辑--------------------------------
1.vim 命令行模式快捷键
	dd	删除（剪切）光标所在整行
	5dd	删除（剪切）从光标处开始的5行
	yy	复制光标所在整行
	5yy	复制从光标处开始的5行
	n	显示搜索命令定位到的下一个字符串
	N	显示搜索命令定位到的上一个字符串
	u	撤销上一步的操作
	p	将之前删除（dd）或复制（yy）过的数据粘贴到光标后面
2.末行模式常用快捷键
	:w	保存
	:q	退出
	:q!	强制退出（放弃对文档的修改内容）
	:wq!	强制保存退出
	:set nu	显示行号
	:set nonu	不显示行号
	:命令	执行该命令
	:整数	跳转到该行


3.shell脚本基础
	#!/bin/bash    指定shell脚本解释器为bash
	
	
	$0	对应的是当前Shell脚本程序的名称
	$#	对应的是总共有几个参数
	$*	对应的是所有位置的参数值
	$?	对应的是显示上一次命令的执行返回值
	$1、$2、$3……则分别对应着第N个位置的参数值
	
	
	测试语句格式： [ 测试语句 ]      //执行成功返回0，失败返回其他随机值
		文件测试语句；
			-d 	是否为目录
			-e	文件是否存在
			-f	是否为一般文件
			-r	当前用户是否可读
			-w	当前用户是否可写
			-x	当前用户是否可执行
		逻辑测试语句；
			&&
			||
			！
		整数值比较语句；
			-eq	是否等于
			-ne	是否不等于
			-gt	是否大于
			-lt	是否小于
			-le	是否等于或小于
			-ge	是否大于或等于

		字符串比较语句。
			=	比较字符串内容是否相同
		    !=	比较字符串内容是否不同
			-z	判断字符串内容是否为空
			
	流程控制
		if 分支语句
			//单分支
			if
				then
			fi
			//双分支
			if	
				then
				else
			fi
			//多分支
			if
				then
			elif
				then
			else
			fi
		
		for 循环语句
			for var in varlist
			do
			done
			
		while 判断语句
			while
			do
			done
			



	
	
		



	

		
		